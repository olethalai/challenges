#!/usr/bin/env ruby

require 'rubygems'
require 'colored'
require 'commander/import'
require 'houston'
require 'yaml'
# require File.expand_path('../devices.rb', __FILE__)

# Possible future feature: Enable storing of device information within the gem, importing and exporting the .yaml file.

HighLine.track_eof = false # Fix for built-in Ruby

program :name, 'PushIt'
program :version, '1.0'
program :description, 'Sends push notifications to iOS apps. Ensure that your certificate path is relative to your current directory.'

program :help, 'Author', 'Oletha Lai'
program :help_formatter, :compact

default_command :help

begin
	@devices = YAML::load_file "devices.yaml"
rescue
	say_error 'No devices.yaml file was found.'.red
end

# Convenience method for debug logging.
# Takes a String as the log parameter.
# Prints the log in blue.
def debug_log (log)
	puts log.blue if $DEBUG_MODE
end

command :devices do |c|

	c.syntax = 'pushit devices [options]'
	c.description = 'Prints out the list of available devices to push to.'

	c.example 'Print the list.', 'pushit devices -f mini'

	c.option '-f', '--filter STRING', 'Filters printed results by device type.'
	c.option '-d', '--debug', 'Enables debug mode.'

	c.action do |args, options|
		$DEBUG_MODE = options.debug.nil? ? false : true

		# Check that there is at least 1 device available
		say_error "There are no available devices.".red and abort if @devices.empty?

		# Filter the list if filtering has been requested.
		if options.filter
			@filter = options.filter.downcase
			debug_log "filter: #{@filter}"
			@filtered_devices = Hash.new
			debug_log "Created filtered devices hash."
			@devices.each do |device, info|
				debug_log "Checking for '#{@filter}' on #{device}."
				if info[:model].downcase.match(/#{filter}/)
					debug_log "Matched. Adding #{device} to filtered devices hash."
					@filtered_devices[device] = info
				end
			end
			debug_log "Filtering finished."

			# Check that there was at least 1 result from the filtering
			say_error "No devices matched your filter.".red and abort if @filtered_devices.empty?
		end

		# Sends the filtered list to be printed if it exists.
		device_info = @filtered_devices ? @filtered_devices : @devices
		debug_log @filtered_devices ? "Sending filtered devices list to be printed." : "Filtered devices undefined. Sending full device list to be printed."

		# Print the list
		debug_log "Commencing list printing..."
		device_info.each do |device, info|
			print "#{device}".bold

			# To ensure that the items are in line with each other, the space of 5 tabs (4 spaces each) will be given for the name field and the space of 3 tabs will be given for the device type
			chars = device.to_s.length
			space_to_next_tab = (4 - (chars % 4))
			if space_to_next_tab != 4
				print "\t"
				chars += space_to_next_tab
			end
			while chars % 20 != 0
				print "\t"
				chars += 4
			end

			print "#{info[:model]}".green

			chars = info[:model].length
			space_to_next_tab = (4 - (chars % 4))
			if space_to_next_tab != 4
				print "\t"
				chars += space_to_next_tab
			end
			while chars % 12 != 0
				print "\t"
				chars += 4
			end

			print "#{info[:token]}".blue
			print "\n"
		end
		debug_log "List printing complete."
	end
end

command :push do |c|

	c.syntax = 'pushit push DEVICE [options]'
	c.description = 'Push a notification to the given device. Try running --help for options.'

	c.example 'Send the reference name for your device and any additional options.', 'pushit push johns_ipad --link web -m This is a web link! -b 1'

	# The command should send different payloads based on the options specified.

	c.option '-a', '--app STRING', 'Specify the app you want the notification to be sent to. Ensure you have the certificate for the app named <app>.pem in this directory. You could also specify the path to the certificate from this directory, less ".pem".'

	c.option '-m', '--message STRING', 'The message to appear on the notification.'
	c.option '-b', '--badge NUMBER', 'Sets the app badge when the notification is received.'
	c.option '-s', '--sound STRING', 'Specifies a sound to be played when the notification is received.'
	c.option '-n', '--newsstand', 'Adds content-available to the payload. Newsstand apps only.'
	c.option '-i', '--issue NUMBER', 'Sets the issue ID of the issue to be downloaded in the background.'
	
	c.option '-l', '--link STRING', 'Sends a link of the given type. Choose from: web, itunes, appstore, email, page, location, telephone.'
	c.option '-t', '--button STRING', 'Sets the action button on the notification. If no --button option is chosen, View will appear by default. Choose from: install, read, watch, browse, listen, visit.'

	c.option '-e', '--environment ENV', [:production, :development], 'Environment to send push notification (production or development (default))'
	c.option '-d', '--debug', 'Enables debug mode.'

	c.action do |chosenDevices, options|
		$DEBUG_MODE = options.debug.nil? ? false : true

		# Log devices specified.
		if $DEBUG_MODE
			print "Debug logs will appear in ".bold + "blue".bold.blue + ".\n".bold
			debug_log chosenDevices.empty? ? "No devices specified." : "Devices specified:"
			chosenDevices.each do |chosenDevice|
				debug_log "#{chosenDevice}"
			end
			print "\n"
		end

		# Ensures that a recipient device was specified.
		say_error "Push aborted. One or more device references required.".red and abort if chosenDevices.empty?
		
		# Ensures that data is available for the specified device.
		chosenDevices.each do |chosenDevice|
			if @devices[chosenDevice.to_sym].nil?
				say_error "Push aborted. No data was found for #{chosenDevice}.".red and abort
			end
		end

		debug_log "Setting environment..."
		if options.environment
			@environment = options.environment
			say_error "Invalid environment,'#{@environment}' (should be either development or production)" and abort unless [:development, :production].include?(@environment)
		else
			@environment = :development
		end
		debug_log "environment: #{@environment}"

		@app = options.app if options.app # This will be converted to the certificate filename later on.

		@message = options.message
		@badge = options.badge.nil? ? nil : options.badge.to_i
		@sound = options.sound
		@newsstand = options.newsstand ? true : false
		@issue_id = options.issue.nil? ? nil : options.issue.to_i

		debug_log "app: #{@app}"
		debug_log "message: #{@message}"
		debug_log "badge: #{@badge}"
		debug_log "sound: #{@sound}"
		debug_log "newsstand: #{@newsstand}"
		debug_log "issue_id: #{@issue_id}"

		unless @message or @badge or @sound or @newsstand
			debug_log "message, badge, sound and newsstand values not specified."
			@message = ask_editor "Please enter a message."
			say_error "Push aborted. You must include use least one of the message, badge, sound or newsstand options.".red and abort if @message.nil?
		end

		if options.link
			debug_log "Setting link..."
			case options.link.downcase
			when 'web'
				@link = 'http://www.google.com/'
			when 'itunes'
				@link = 'itms://itunes.apple.com/gb/album/insomnia-best-faithless/id305775034'
			when 'appstore'
				@link = 'https://itunes.apple.com/us/app/wwdc/id640199958'
			when 'email'
				@link = 'mailto:testuser@pushit.com?subject=Email%20from%20a%20push%20notification%20link!'
			when 'page'
				@link = 'pm-page://local/54637/72/3/0.4746,0.7323,0.1845,0.5763'
			when 'location'
				@link = 'http://maps.apple.com/?q=cupertino'
			when 'telephone'
				@link = 'tel:150' # Free from a T-Mobile phone.
			else
				say_error "Push aborted. Invalid link type.".red and abort
			end
			debug_log "link: #{@link}"
		end

		if options.button
			debug_log "Setting button..."
			button_title = options.button.capitalize
			unless button_title == ('Install' or 'Read' or 'Watch' or 'Browse' or 'Listen' or 'Visit')
				say_error "Push aborted. Invalid button title.".red and abort
			end
			@button = "APNSActionButton" + button_title
			debug_log "button: #{@button}"
		end

		@notifications = []
		debug_log "Created notifications array."
		chosenDevices.each do |device|
			debug_log "Setting up notification for device: #{device}"
			notification = Houston::Notification.new({})
			notification.token = @devices[device.to_sym][:token]
			notification.alert = @message if @message
			notification.badge = @badge if @badge
			notification.sound = @sound if @sound
			notification.content_available = @newsstand if @newsstand

			custom_payload = Hash.new
			debug_log "Created custom payload hash."

			custom_payload.merge!({:new_issue_identifier => "#{@issue_id}"}) if @issue_id
			custom_payload.merge!({:pmps => {:'link-url' => "#{@link}"}}) if @link
			custom_payload.merge!({'alert' => {:body => "#{@message}", :'action-loc-key' => "#{@button}"}}) if @button

			debug_log "Merging custom payload..."
			notification.custom_data.merge!(custom_payload)

			debug_log "Adding notification to notifications array..."
			@notifications << notification
			debug_log "Notification added."
		end
		debug_log "All notifications added."

		debug_log "Creating Houston Client..."
		client = @environment == :production ? Houston::Client.production : Houston::Client.development
		debug_log "Setting certificate..."
		client.certificate = File.read(@app.nil? ? "cert.pem" : "#{@app}.pem")
		# client.passphrase = password("Please enter the password for the #{@app.capitalize} application certificate:", '*')

		debug_log "Beginning push operation..."
		begin
			client.push(*@notifications)
		rescue => message
			say_error "Exception sending notification: #{message}".red and abort
		end
		debug_log "Push complete."

		say_ok "Push notification send successful!".green
	end
end


